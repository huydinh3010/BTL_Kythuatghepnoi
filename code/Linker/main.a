;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <eeprom.h>
;#include <string.h>
;#define BAUD 9600
;#define SYS_CLOCK 11059200
;#define DHT11_PORT PORTB
;#define DHT11_DDR DDRB
;#define DHT11_PIN PINB
;#define DHT11_INPUTPIN 1
;#define DHT11_TIMEOUT 200
;#define V_REF 5.0
;#define LCD_PORT PORTD
;#define LCD_DPIN DDRD
;#define LCD_RSPIN 2
;#define LCD_ENPIN 3
;
;char recv_buf[20];
;char recv_buf_ind = 0;
;char recv_done = 0;
;
;void ADC_init(){
; 0000 0017 void ADC_init(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0018     // select Vref = AVcc
; 0000 0019     ADMUX |= (1<<REFS0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001A //    // Left adjust ADC result to allow easy 8 bit reading
; 0000 001B //    ADMUX |= (1 << ADLAR);
; 0000 001C     // set prescaler to 64 and enable ADC
; 0000 001D     ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0)| (1 << ADEN);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001E }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;unsigned int ADC_read(unsigned char ADCchannel){
; 0000 0020 unsigned int ADC_read(unsigned char ADCchannel){
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0021     //select ADC channel with safety mask
; 0000 0022     ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
;PCODE: $00000019 VOL: 0
;	ADCchannel -> Y+0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0023     //single conversion mode
; 0000 0024     ADCSRA |= (1<<ADSC);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0025     // wait until ADC conversion is complete
; 0000 0026     while( ADCSRA & (1<<ADSC));
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0027     return ADCL + (ADCH & 0x03) * 256;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0028 }
;PCODE: $00000034 VOL: 0
;
;void USART_init(unsigned int ubrr){
; 0000 002A void USART_init(unsigned int ubrr){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 002B 	// set baud rate
; 0000 002C 	UBRR0H = (unsigned char)(ubrr >> 8);
;PCODE: $00000037 VOL: 0
;	ubrr -> Y+0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002D 	UBRR0L = (unsigned char)ubrr;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002E 	// enable receiver and transmitter, receive interrupt
; 0000 002F 	UCSR0B = 0x98;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0030 	// set frame format: 8 bit data, 1 stop bit
; 0000 0031 	UCSR0C = 0x06;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0032 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;void USART_put(unsigned char * buf){
; 0000 0034 void USART_put(unsigned char * buf){
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0035     int i = 0;
; 0000 0036     while(buf[i] != 0){
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;	*buf -> Y+2
;	i -> R16,R17
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0037         while(!(UCSR0A & (1 << UDRE0))); // wait for empty transmit buffer
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0038         UDR0 = buf[i];
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0039         i++;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003A     }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003B     // sending '\n' '\r'
; 0000 003C     while(!(UCSR0A & (1 << UDRE0)));
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003D     UDR0 = '\n';
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 003E     while(!(UCSR0A & (1 << UDRE0)));
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 003F     UDR0 = '\r';
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0040 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;interrupt [USART_RXC] void USART_receive_isr (void){
; 0000 0042 interrupt [19] void USART_receive_isr (void){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0043     recv_buf_ind = (recv_buf_ind + 1) % 20;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0044     recv_buf[recv_buf_ind] = UDR0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0045     if(recv_buf[recv_buf_ind] == 'e') recv_done = 1;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0046 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;
;void LCD_action(unsigned char cmnd){
; 0000 0048 void LCD_action(unsigned char cmnd){
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0049     // 4 bit mode
; 0000 004A     LCD_PORT = (LCD_PORT & 0x0F) | (cmnd & 0xF0); // send upper nibble
;PCODE: $00000093 VOL: 0
;	cmnd -> Y+0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 004B     LCD_PORT &= ~(1 << LCD_RSPIN); // RS = 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 004C     LCD_PORT |= (1 << LCD_ENPIN); // EN = 1
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 004D     delay_us(1);
;PCODE: $0000009F VOL: 0
; 0000 004E     LCD_PORT &= ~(1 << LCD_ENPIN); // EN = 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 004F     delay_us(200);
;PCODE: $000000A2 VOL: 0
; 0000 0050     LCD_PORT = (LCD_PORT & 0x0F) | (cmnd << 4); // send lower nibble
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0051     LCD_PORT |= (1 << LCD_ENPIN); // EN = 1
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0052     delay_us(1);
;PCODE: $000000AC VOL: 0
; 0000 0053     LCD_PORT &= ~(1 << LCD_ENPIN); // EN = 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0054     delay_ms(2);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0055 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;
;void LCD_init(void){
; 0000 0057 void LCD_init(void){
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0058     LCD_DPIN = 0xFF;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0059     delay_ms(20); // wait before LCD activation
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 005A     LCD_action(0x02); // 4 bit control
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 005B     LCD_action(0x28); // initialization of 16X2 LCD in 4bit mode
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 005C     LCD_action(0x0C); // disable cursor
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 005D     LCD_action(0x06); // auto increment cursor
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 005E     LCD_action(0x01); // clear LCD
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 005F     LCD_action(0x80); // cursor at home position
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0060     delay_ms(2);
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0061 }
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;
;
;void LCD_clear(void){
; 0000 0064 void LCD_clear(void){
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0065     LCD_action(0x01); // clear LCD
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0066     delay_ms(2);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0067     LCD_action(0x80); // move to line 1, position 1
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0068 }
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;void LCD_print(char *str){
; 0000 006A void LCD_print(char *str){
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 006B     int i;
; 0000 006C 	for(i=0; str[i]!=0; i++)
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;	*str -> Y+2
;	i -> R16,R17
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 006D 	{
; 0000 006E 		LCD_PORT = (LCD_PORT & 0x0F) | (str[i] & 0xF0);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 006F 		LCD_PORT |= (1<<LCD_RSPIN); // RS = 1, data reg
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0070 		LCD_PORT |= (1<<LCD_ENPIN); // EN = 1
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0071 		delay_us(1);
;PCODE: $000000F7 VOL: 0
; 0000 0072 		LCD_PORT &= ~ (1<<LCD_ENPIN); // EN = 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0073 		delay_us(200);
;PCODE: $000000FA VOL: 0
; 0000 0074 		LCD_PORT = (LCD_PORT & 0x0F) | (str[i] << 4);
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0075 		LCD_PORT |= (1<<LCD_ENPIN);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0076 		delay_us(1);
;PCODE: $00000107 VOL: 0
; 0000 0077 		LCD_PORT &= ~ (1<<LCD_ENPIN);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0078 		delay_ms(2);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0079 	}
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 007A }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;
;void LCD_print_pos(char row, char pos, char *str){
; 0000 007C void LCD_print_pos(char row, char pos, char *str){
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 007D     if(row == 0 && pos < 16) // line 1
;PCODE: $0000011B VOL: 0
;	row -> Y+3
;	pos -> Y+2
;	*str -> Y+0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 007E         LCD_action((pos & 0x0F)|0x80);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 007F     else if(row == 1 && pos < 16) // line 2
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0080         LCD_action((pos & 0x0F)|0xC0);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0081     LCD_print(str);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0082 }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;
;int read_dht11(int* temp, int* humidity){
; 0000 0084 int read_dht11(int* temp, int* humidity){
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0085     unsigned char i, j, bytes[5], time_count;
; 0000 0086     //reset port
; 0000 0087     DHT11_DDR |= (1<<DHT11_INPUTPIN); //output mode
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;	*temp -> Y+11
;	*humidity -> Y+9
;	i -> R17
;	j -> R16
;	bytes -> Y+4
;	time_count -> R19
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0088     DHT11_PORT |= (1<<DHT11_INPUTPIN); // high
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0089     delay_ms(100);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 008A 	// send start signal
; 0000 008B 	DHT11_PORT &= ~(1<<DHT11_INPUTPIN); // low
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 008C 	delay_ms(18);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 008D 	DHT11_PORT |= (1<<DHT11_INPUTPIN); // high
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 008E 	DHT11_DDR &= ~(1<<DHT11_INPUTPIN); //input mode
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 008F 	delay_us(40);
;PCODE: $00000158 VOL: 0
; 0000 0090     // check DHT response signal
; 0000 0091     if((DHT11_PIN & (1 << DHT11_INPUTPIN))){
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0092         // error
; 0000 0093         return -1;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0094     }
; 0000 0095     delay_us(80);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0096     // check DHT pulls up
; 0000 0097     if(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0098         // error
; 0000 0099         return -2;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 009A     }
; 0000 009B     delay_us(80);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 009C     // read 5 bytes
; 0000 009D     for(i = 0; i < 5; i++){
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 009E         unsigned char result = 0;
; 0000 009F         for(j = 0; j < 8; j++){
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;	*temp -> Y+12
;	*humidity -> Y+10
;	bytes -> Y+5
;	result -> Y+0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00A0             time_count = 0;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00A1             // wait for a high voltage
; 0000 00A2             while(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00A3                 time_count++;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00A4                 if(time_count > DHT11_TIMEOUT) return -3; // timeout error
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00A5                 delay_us(1);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00A6             }
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00A7             delay_us(30);
;PCODE: $00000194 VOL: 0
; 0000 00A8             if(DHT11_PIN & (1 << DHT11_INPUTPIN)) // high after 30 us -> bit 1
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00A9                 result |= (1<<(7-j));
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00AA             time_count = 0;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00AB             // wait until get low
; 0000 00AC             while(DHT11_PIN & (1 << DHT11_INPUTPIN)){
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 00AD                 time_count++;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00AE                 if(time_count > DHT11_TIMEOUT) return -3; // timeout error
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00AF                 delay_us(1);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00B0             }
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00B1         }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00B2         bytes[i] = result;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00B3     }
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00B4     // reset port
; 0000 00B5     DHT11_DDR |= (1<<DHT11_INPUTPIN); //output mode
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00B6     DHT11_PORT |= (1<<DHT11_INPUTPIN); // high
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00B7     delay_ms(100);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 00B8     // checksum
; 0000 00B9     if((unsigned char)(bytes[0] + bytes[1] + bytes[2] + bytes[3]) == bytes[4]){
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00BA         *temp = bytes[2];
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00BB //        *temp = *temp << 8;
; 0000 00BC //        *temp = *temp | bytes[3];
; 0000 00BD         *humidity = bytes[0];
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00BE //        *humidity = *humidity << 8;
; 0000 00BF //        *humidity = *humidity | bytes[1];
; 0000 00C0         return 0;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00C1     }
; 0000 00C2     // checksum error
; 0000 00C3     return -4;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00C4 }
;PCODE: $000001EC VOL: 0
;
;void main(void){
; 0000 00C6 void main(void){
;PCODE: $000001ED VOL: 0
; 0000 00C7     int temp, humidity, err_code, light, temp_threshold = -1, humidity_threshold = -1, light_threshold = -1;
; 0000 00C8     char i, j, recv_data[20], loop_count = 0, *p;
; 0000 00C9     char mss[24];
; 0000 00CA     #asm("sei ");
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;	temp -> R16,R17
;	humidity -> R18,R19
;	err_code -> R20,R21
;	light -> Y+55
;	temp_threshold -> Y+53
;	humidity_threshold -> Y+51
;	light_threshold -> Y+49
;	i -> Y+48
;	j -> Y+47
;	recv_data -> Y+27
;	loop_count -> Y+26
;	*p -> Y+24
;	mss -> Y+0
;PCODE: $000001F3 VOL: 0
	sei 
;PCODE: $000001F4 VOL: 0
; 0000 00CB     // ADC init - ADC6
; 0000 00CC     ADC_init();
;PCODE: $000001F5 VOL: 0
; 0000 00CD 	USART_init(SYS_CLOCK/16/BAUD - 1);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 00CE     LCD_init();
;PCODE: $000001F9 VOL: 0
; 0000 00CF     // init led pin
; 0000 00D0     DDRB |= 0x1C; // 2,3,4
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00D1     temp_threshold = eeprom_read_word(0);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00D2     humidity_threshold = eeprom_read_word(2);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 00D3     light_threshold = eeprom_read_word(4);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00D4     //USART_put("Hello from ATmega328p");
; 0000 00D5 	while(1){
;PCODE: $00000206 VOL: 0
; 0000 00D6         // check uart data received
; 0000 00D7         loop_count++;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 00D8         if(recv_done){
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00D9             recv_done = 0;
;PCODE: $0000020C VOL: 0
; 0000 00DA             for(i = 0; i < 20; i++) // find 's';
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 00DB                 if(recv_buf[i] == 's') break;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 00DC             if(i != 20){
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 00DD                 j = (i + 1) % 20;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 00DE                 memset(recv_data, 0, 20);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 00DF                 while(j != i){
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 00E0                     if(recv_buf[j] == 'e') break;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 00E1                     recv_data[(j-i+20)%20-1] = recv_buf[j];
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 00E2                     j = (j+1) % 20;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 00E3                 }
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 00E4                 if(j != i){
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 00E5                     i = 0;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 00E6                     p = strrchr(recv_data, ' ');
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 00E7                     sscanf(p + 1, "%d", &light_threshold);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 00E8                     *p = 0;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 00E9                     p = strrchr(recv_data, ' ');
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00EA                     sscanf(p + 1, "%d", &humidity_threshold);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 00EB                     *p = 0;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 00EC                     p = strrchr(recv_data, ' ');
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 00ED                     sscanf(p + 1, "%d", &temp_threshold);
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 00EE                     // eeprom  write
; 0000 00EF                     eeprom_write_word(0, temp_threshold);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 00F0                     eeprom_write_word(2, humidity_threshold);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 00F1                     eeprom_write_word(4, light_threshold);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 00F2                 }
; 0000 00F3             }
;PCODE: $000002A9 VOL: 0
; 0000 00F4         }
;PCODE: $000002AA VOL: 0
; 0000 00F5 
; 0000 00F6 
; 0000 00F7         if(loop_count % 10 == 0){ // read rht11 sensor after every 1s
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 00F8             light = ADC_read(6);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
; 0000 00F9             if((err_code = read_dht11(&temp, &humidity)) == 0){
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 00FA                 sprintf(mss, "0 %d %d %d", temp, humidity, light);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 00FB                 USART_put(mss);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 00FC                 // LCD update
; 0000 00FD                 LCD_clear();
;PCODE: $000002DA VOL: 0
; 0000 00FE                 sprintf(mss, "T:%doC, H:%d%%", temp, humidity);
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 00FF                 LCD_print(mss);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0100                 sprintf(mss, "L:%4.2f%%", light*100.0/1024);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0101                 LCD_print_pos(1, 0, mss);
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0102 
; 0000 0103             } else{
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 0104                 sprintf(mss, "-1 %d", err_code);
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 0105                 USART_put(mss);
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0106             }
;PCODE: $00000313 VOL: 0
; 0000 0107         }
; 0000 0108 
; 0000 0109         if(loop_count >= 55){ // send threshold
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 010A             loop_count = 0;
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 010B             sprintf(mss, "1 %d %d %d", temp_threshold, humidity_threshold, light_threshold);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 010C             USART_put(mss);
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
; 0000 010D         }
; 0000 010E 
; 0000 010F         // check threshold
; 0000 0110         PORTB.2 = temp_threshold < temp;
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0111         PORTB.3 = humidity_threshold < humidity;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0112         PORTB.4 = light_threshold > light;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 0113 
; 0000 0114 		delay_ms(100);
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 0115 	}
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
; 0000 0116 }
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
