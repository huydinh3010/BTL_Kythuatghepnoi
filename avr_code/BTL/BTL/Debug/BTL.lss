
BTL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000b84  00000c18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080013a  0080013a  00000c52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137b  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b6  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089d  00000000  00000000  000029d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00003270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000521  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c25  00000000  00000000  000038ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000044d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e8       	ldi	r30, 0x84	; 132
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 33       	cpi	r26, 0x3B	; 59
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
  9e:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
    if(row == 0 && pos < 16) // line 1
        LCD_action((pos & 0x0F)|0x80);
    else if(row == 1 && pos < 16) // line 2
        LCD_action((pos & 0x0F)|0xC0);
    LCD_print(str);
}
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <ADC_read>:
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	89 2b       	or	r24, r25
  c8:	80 83       	st	Z, r24
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <ADC_read+0x18>
  da:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  de:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  e2:	83 70       	andi	r24, 0x03	; 3
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	98 2f       	mov	r25, r24
  e8:	88 27       	eor	r24, r24
  ea:	82 0f       	add	r24, r18
  ec:	91 1d       	adc	r25, r1
  ee:	08 95       	ret

000000f0 <USART_init>:
  f0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  f8:	88 e9       	ldi	r24, 0x98	; 152
  fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 104:	08 95       	ret

00000106 <USART_put>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	fc 01       	movw	r30, r24
 10c:	20 81       	ld	r18, Z
 10e:	22 23       	and	r18, r18
 110:	69 f0       	breq	.+26     	; 0x12c <USART_put+0x26>
 112:	dc 01       	movw	r26, r24
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	e0 ec       	ldi	r30, 0xC0	; 192
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	c6 ec       	ldi	r28, 0xC6	; 198
 11c:	d0 e0       	ldi	r29, 0x00	; 0
 11e:	90 81       	ld	r25, Z
 120:	95 ff       	sbrs	r25, 5
 122:	fd cf       	rjmp	.-6      	; 0x11e <USART_put+0x18>
 124:	28 83       	st	Y, r18
 126:	2d 91       	ld	r18, X+
 128:	21 11       	cpse	r18, r1
 12a:	f9 cf       	rjmp	.-14     	; 0x11e <USART_put+0x18>
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	85 ff       	sbrs	r24, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <USART_put+0x2a>
 136:	8a e0       	ldi	r24, 0x0A	; 10
 138:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 13c:	e0 ec       	ldi	r30, 0xC0	; 192
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	85 ff       	sbrs	r24, 5
 144:	fd cf       	rjmp	.-6      	; 0x140 <USART_put+0x3a>
 146:	8d e0       	ldi	r24, 0x0D	; 13
 148:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_action>:
 152:	9b b1       	in	r25, 0x0b	; 11
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	28 2f       	mov	r18, r24
 158:	20 7f       	andi	r18, 0xF0	; 240
 15a:	92 2b       	or	r25, r18
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	5a 98       	cbi	0x0b, 2	; 11
 160:	5b 9a       	sbi	0x0b, 3	; 11
 162:	34 e0       	ldi	r19, 0x04	; 4
 164:	3a 95       	dec	r19
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_action+0x12>
 168:	5b 98       	cbi	0x0b, 3	; 11
 16a:	e8 e2       	ldi	r30, 0x28	; 40
 16c:	f2 e0       	ldi	r31, 0x02	; 2
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_action+0x1c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_action+0x22>
 174:	00 00       	nop
 176:	2b b1       	in	r18, 0x0b	; 11
 178:	2f 70       	andi	r18, 0x0F	; 15
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	8f 9f       	mul	r24, r31
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	82 2b       	or	r24, r18
 184:	8b b9       	out	0x0b, r24	; 11
 186:	5b 9a       	sbi	0x0b, 3	; 11
 188:	34 e0       	ldi	r19, 0x04	; 4
 18a:	3a 95       	dec	r19
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_action+0x38>
 18e:	5b 98       	cbi	0x0b, 3	; 11
 190:	89 e9       	ldi	r24, 0x99	; 153
 192:	95 e1       	ldi	r25, 0x15	; 21
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_action+0x42>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_action+0x48>
 19a:	08 95       	ret

0000019c <LCD_init>:
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8a b9       	out	0x0a, r24	; 10
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 ed       	ldi	r25, 0xD7	; 215
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCD_init+0x8>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCD_init+0xe>
 1aa:	00 00       	nop
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1b2:	88 e2       	ldi	r24, 0x28	; 40
 1b4:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1b8:	8c e0       	ldi	r24, 0x0C	; 12
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1d0:	89 e9       	ldi	r24, 0x99	; 153
 1d2:	95 e1       	ldi	r25, 0x15	; 21
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCD_init+0x38>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <LCD_init+0x3e>
 1da:	08 95       	ret

000001dc <LCD_clear>:
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1e2:	89 e9       	ldi	r24, 0x99	; 153
 1e4:	95 e1       	ldi	r25, 0x15	; 21
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <LCD_clear+0xa>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LCD_clear+0x10>
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
 1f2:	08 95       	ret

000001f4 <LCD_print>:
 1f4:	fc 01       	movw	r30, r24
 1f6:	90 81       	ld	r25, Z
 1f8:	99 23       	and	r25, r25
 1fa:	41 f1       	breq	.+80     	; 0x24c <LCD_print+0x58>
 1fc:	2b b1       	in	r18, 0x0b	; 11
 1fe:	2f 70       	andi	r18, 0x0F	; 15
 200:	90 7f       	andi	r25, 0xF0	; 240
 202:	92 2b       	or	r25, r18
 204:	9b b9       	out	0x0b, r25	; 11
 206:	5a 9a       	sbi	0x0b, 2	; 11
 208:	5b 9a       	sbi	0x0b, 3	; 11
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <LCD_print+0x18>
 210:	5b 98       	cbi	0x0b, 3	; 11
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	92 e0       	ldi	r25, 0x02	; 2
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_print+0x22>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_print+0x28>
 21c:	00 00       	nop
 21e:	4b b1       	in	r20, 0x0b	; 11
 220:	91 91       	ld	r25, Z+
 222:	80 e1       	ldi	r24, 0x10	; 16
 224:	98 9f       	mul	r25, r24
 226:	90 01       	movw	r18, r0
 228:	11 24       	eor	r1, r1
 22a:	94 2f       	mov	r25, r20
 22c:	9f 70       	andi	r25, 0x0F	; 15
 22e:	29 2b       	or	r18, r25
 230:	2b b9       	out	0x0b, r18	; 11
 232:	5b 9a       	sbi	0x0b, 3	; 11
 234:	94 e0       	ldi	r25, 0x04	; 4
 236:	9a 95       	dec	r25
 238:	f1 f7       	brne	.-4      	; 0x236 <LCD_print+0x42>
 23a:	5b 98       	cbi	0x0b, 3	; 11
 23c:	89 e9       	ldi	r24, 0x99	; 153
 23e:	95 e1       	ldi	r25, 0x15	; 21
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_print+0x4c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_print+0x52>
 246:	90 81       	ld	r25, Z
 248:	91 11       	cpse	r25, r1
 24a:	d8 cf       	rjmp	.-80     	; 0x1fc <LCD_print+0x8>
 24c:	08 95       	ret

0000024e <read_dht11>:

int read_dht11(int* temp, int* humidity){
 24e:	cf 92       	push	r12
 250:	df 92       	push	r13
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <read_dht11+0x12>
 260:	00 d0       	rcall	.+0      	; 0x262 <read_dht11+0x14>
 262:	1f 92       	push	r1
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	7c 01       	movw	r14, r24
    unsigned char i, j, bytes[5], time_count;
    //reset port
    DHT11_DDR |= (1<<DHT11_INPUTPIN); //output mode
 26a:	21 9a       	sbi	0x04, 1	; 4
    DHT11_PORT |= (1<<DHT11_INPUTPIN); // high
 26c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	8f e5       	ldi	r24, 0x5F	; 95
 272:	93 e0       	ldi	r25, 0x03	; 3
 274:	21 50       	subi	r18, 0x01	; 1
 276:	80 40       	sbci	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <read_dht11+0x26>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <read_dht11+0x30>
 27e:	00 00       	nop
    _delay_ms(100);
	// send start signal  
	DHT11_PORT &= ~(1<<DHT11_INPUTPIN); // low
 280:	29 98       	cbi	0x05, 1	; 5
 282:	a6 e6       	ldi	r26, 0x66	; 102
 284:	b2 ec       	ldi	r27, 0xC2	; 194
 286:	11 97       	sbiw	r26, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <read_dht11+0x38>
 28a:	00 00       	nop
	_delay_ms(18);
	DHT11_PORT |= (1<<DHT11_INPUTPIN); // high
 28c:	29 9a       	sbi	0x05, 1	; 5
	DHT11_DDR &= ~(1<<DHT11_INPUTPIN); //input mode
 28e:	21 98       	cbi	0x04, 1	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 290:	b3 e9       	ldi	r27, 0x93	; 147
 292:	ba 95       	dec	r27
 294:	f1 f7       	brne	.-4      	; 0x292 <read_dht11+0x44>
 296:	00 c0       	rjmp	.+0      	; 0x298 <read_dht11+0x4a>
	_delay_us(40);
    // check DHT response signal
    if((DHT11_PIN & (1 << DHT11_INPUTPIN))){
 298:	19 99       	sbic	0x03, 1	; 3
 29a:	66 c0       	rjmp	.+204    	; 0x368 <read_dht11+0x11a>
 29c:	ed ed       	ldi	r30, 0xDD	; 221
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <read_dht11+0x52>
        // error
        return -1;
    }
    _delay_us(80);
    // check DHT pulls up
    if(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
 2a4:	19 9b       	sbis	0x03, 1	; 3
 2a6:	63 c0       	rjmp	.+198    	; 0x36e <read_dht11+0x120>
 2a8:	8d ed       	ldi	r24, 0xDD	; 221
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <read_dht11+0x5e>
 2b0:	8e 01       	movw	r16, r28
 2b2:	0f 5f       	subi	r16, 0xFF	; 255
 2b4:	1f 4f       	sbci	r17, 0xFF	; 255
 2b6:	6e 01       	movw	r12, r28
 2b8:	96 e0       	ldi	r25, 0x06	; 6
 2ba:	c9 0e       	add	r12, r25
 2bc:	d1 1c       	adc	r13, r1
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
                _delay_us(1);
            }
            _delay_us(30);
            if(DHT11_PIN & (1 << DHT11_INPUTPIN)) // high after 30 us -> bit 1
                result |= (1<<(7-j));
 2be:	e1 e0       	ldi	r30, 0x01	; 1
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	2d c0       	rjmp	.+90     	; 0x31e <read_dht11+0xd0>
 2c4:	91 50       	subi	r25, 0x01	; 1
        for(j = 0; j < 8; j++){  
            time_count = 0;
            // wait for a high voltage
            while(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
                time_count++;
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
 2c6:	11 f4       	brne	.+4      	; 0x2cc <read_dht11+0x7e>
 2c8:	55 c0       	rjmp	.+170    	; 0x374 <read_dht11+0x126>
    for(i = 0; i < 5; i++){
        unsigned char result = 0;
        for(j = 0; j < 8; j++){  
            time_count = 0;
            // wait for a high voltage
            while(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
 2ca:	98 ec       	ldi	r25, 0xC8	; 200
 2cc:	a4 e0       	ldi	r26, 0x04	; 4
 2ce:	aa 95       	dec	r26
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <read_dht11+0x80>
 2d2:	19 9b       	sbis	0x03, 1	; 3
 2d4:	f7 cf       	rjmp	.-18     	; 0x2c4 <read_dht11+0x76>
 2d6:	be e6       	ldi	r27, 0x6E	; 110
 2d8:	ba 95       	dec	r27
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <read_dht11+0x8a>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <read_dht11+0x90>
                time_count++;
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
                _delay_us(1);
            }
            _delay_us(30);
            if(DHT11_PIN & (1 << DHT11_INPUTPIN)) // high after 30 us -> bit 1
 2de:	19 9b       	sbis	0x03, 1	; 3
 2e0:	52 c0       	rjmp	.+164    	; 0x386 <read_dht11+0x138>
                result |= (1<<(7-j));
 2e2:	df 01       	movw	r26, r30
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <read_dht11+0x9e>
 2e8:	aa 0f       	add	r26, r26
 2ea:	bb 1f       	adc	r27, r27
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <read_dht11+0x9a>
 2f0:	4a 2b       	or	r20, r26
 2f2:	49 c0       	rjmp	.+146    	; 0x386 <read_dht11+0x138>
 2f4:	91 50       	subi	r25, 0x01	; 1
            time_count = 0;     
            // wait until get low
            while(DHT11_PIN & (1 << DHT11_INPUTPIN)){
                time_count++;
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
 2f6:	11 f4       	brne	.+4      	; 0x2fc <read_dht11+0xae>
 2f8:	40 c0       	rjmp	.+128    	; 0x37a <read_dht11+0x12c>
            _delay_us(30);
            if(DHT11_PIN & (1 << DHT11_INPUTPIN)) // high after 30 us -> bit 1
                result |= (1<<(7-j));
            time_count = 0;     
            // wait until get low
            while(DHT11_PIN & (1 << DHT11_INPUTPIN)){
 2fa:	98 ec       	ldi	r25, 0xC8	; 200
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	8a 95       	dec	r24
 300:	f1 f7       	brne	.-4      	; 0x2fe <read_dht11+0xb0>
 302:	19 99       	sbic	0x03, 1	; 3
 304:	f7 cf       	rjmp	.-18     	; 0x2f4 <read_dht11+0xa6>
 306:	21 50       	subi	r18, 0x01	; 1
 308:	31 09       	sbc	r19, r1
 30a:	18 f0       	brcs	.+6      	; 0x312 <read_dht11+0xc4>
    for(i = 0; i < 5; i++){
        unsigned char result = 0;
        for(j = 0; j < 8; j++){  
            time_count = 0;
            // wait for a high voltage
            while(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
 30c:	19 9b       	sbis	0x03, 1	; 3
 30e:	dd cf       	rjmp	.-70     	; 0x2ca <read_dht11+0x7c>
 310:	e2 cf       	rjmp	.-60     	; 0x2d6 <read_dht11+0x88>
                time_count++;
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
                _delay_us(1); 
            } 
        }
        bytes[i] = result;
 312:	d8 01       	movw	r26, r16
 314:	4d 93       	st	X+, r20
 316:	8d 01       	movw	r16, r26
        // error
        return -2;
    }
    _delay_us(80);
    // read 5 bytes
    for(i = 0; i < 5; i++){
 318:	ac 15       	cp	r26, r12
 31a:	bd 05       	cpc	r27, r13
 31c:	21 f0       	breq	.+8      	; 0x326 <read_dht11+0xd8>
            _delay_us(30);
            if(DHT11_PIN & (1 << DHT11_INPUTPIN)) // high after 30 us -> bit 1
                result |= (1<<(7-j));
            time_count = 0;     
            // wait until get low
            while(DHT11_PIN & (1 << DHT11_INPUTPIN)){
 31e:	27 e0       	ldi	r18, 0x07	; 7
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	f3 cf       	rjmp	.-26     	; 0x30c <read_dht11+0xbe>
            } 
        }
        bytes[i] = result;
    } 
    // reset port
    DHT11_DDR |= (1<<DHT11_INPUTPIN); //output mode
 326:	21 9a       	sbi	0x04, 1	; 4
    DHT11_PORT |= (1<<DHT11_INPUTPIN); // high
 328:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	bf ef       	ldi	r27, 0xFF	; 255
 32c:	ef e5       	ldi	r30, 0x5F	; 95
 32e:	f3 e0       	ldi	r31, 0x03	; 3
 330:	b1 50       	subi	r27, 0x01	; 1
 332:	e0 40       	sbci	r30, 0x00	; 0
 334:	f0 40       	sbci	r31, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <read_dht11+0xe2>
 338:	00 c0       	rjmp	.+0      	; 0x33a <read_dht11+0xec>
 33a:	00 00       	nop
    _delay_ms(100);
    // checksum
    if((unsigned char)(bytes[0] + bytes[1] + bytes[2] + bytes[3]) == bytes[4]){  
 33c:	99 81       	ldd	r25, Y+1	; 0x01
 33e:	2b 81       	ldd	r18, Y+3	; 0x03
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	89 0f       	add	r24, r25
 344:	82 0f       	add	r24, r18
 346:	3c 81       	ldd	r19, Y+4	; 0x04
 348:	83 0f       	add	r24, r19
 34a:	3d 81       	ldd	r19, Y+5	; 0x05
 34c:	83 13       	cpse	r24, r19
 34e:	18 c0       	rjmp	.+48     	; 0x380 <read_dht11+0x132>
        *temp = bytes[2];
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	d7 01       	movw	r26, r14
 354:	2d 93       	st	X+, r18
 356:	3c 93       	st	X, r19
//        *temp = *temp << 8;
//        *temp = *temp | bytes[3];
        *humidity = bytes[0];
 358:	89 2f       	mov	r24, r25
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fb 01       	movw	r30, r22
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	80 83       	st	Z, r24
//        *humidity = *humidity << 8;
//        *humidity = *humidity | bytes[1];
        return 0;
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	12 c0       	rjmp	.+36     	; 0x38c <read_dht11+0x13e>
	DHT11_DDR &= ~(1<<DHT11_INPUTPIN); //input mode
	_delay_us(40);
    // check DHT response signal
    if((DHT11_PIN & (1 << DHT11_INPUTPIN))){
        // error
        return -1;
 368:	8f ef       	ldi	r24, 0xFF	; 255
 36a:	9f ef       	ldi	r25, 0xFF	; 255
 36c:	0f c0       	rjmp	.+30     	; 0x38c <read_dht11+0x13e>
    }
    _delay_us(80);
    // check DHT pulls up
    if(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
        // error
        return -2;
 36e:	8e ef       	ldi	r24, 0xFE	; 254
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	0c c0       	rjmp	.+24     	; 0x38c <read_dht11+0x13e>
        for(j = 0; j < 8; j++){  
            time_count = 0;
            // wait for a high voltage
            while(!(DHT11_PIN & (1 << DHT11_INPUTPIN))){
                time_count++;
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
 374:	8d ef       	ldi	r24, 0xFD	; 253
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	09 c0       	rjmp	.+18     	; 0x38c <read_dht11+0x13e>
                result |= (1<<(7-j));
            time_count = 0;     
            // wait until get low
            while(DHT11_PIN & (1 << DHT11_INPUTPIN)){
                time_count++;
                if(time_count > DHT11_TIMEOUT) return -3; // timeout error
 37a:	8d ef       	ldi	r24, 0xFD	; 253
 37c:	9f ef       	ldi	r25, 0xFF	; 255
 37e:	06 c0       	rjmp	.+12     	; 0x38c <read_dht11+0x13e>
//        *humidity = *humidity << 8;
//        *humidity = *humidity | bytes[1];
        return 0;
    }            
    // checksum error
    return -4;
 380:	8c ef       	ldi	r24, 0xFC	; 252
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	03 c0       	rjmp	.+6      	; 0x38c <read_dht11+0x13e>
            _delay_us(30);
            if(DHT11_PIN & (1 << DHT11_INPUTPIN)) // high after 30 us -> bit 1
                result |= (1<<(7-j));
            time_count = 0;     
            // wait until get low
            while(DHT11_PIN & (1 << DHT11_INPUTPIN)){
 386:	19 99       	sbic	0x03, 1	; 3
 388:	b8 cf       	rjmp	.-144    	; 0x2fa <read_dht11+0xac>
 38a:	bd cf       	rjmp	.-134    	; 0x306 <read_dht11+0xb8>
//        *humidity = *humidity | bytes[1];
        return 0;
    }            
    // checksum error
    return -4;
}
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	ff 90       	pop	r15
 3a0:	ef 90       	pop	r14
 3a2:	df 90       	pop	r13
 3a4:	cf 90       	pop	r12
 3a6:	08 95       	ret

000003a8 <main>:

int main(void){
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	6c 97       	sbiw	r28, 0x1c	; 28
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
    int temp, humidity, err_code, light, temp_threshold = -1, humidity_threshold = -1, light_threshold = -1;
    char i, j, recv_data[20], loop_count = 0, *p;
    char mss[24];
    asm volatile("sei"::);
 3bc:	78 94       	sei
    // ADC init
    ADC_init();
 3be:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	USART_init(F_CPU/16/BAUD - 1);
 3c2:	87 e4       	ldi	r24, 0x47	; 71
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 78 00 	call	0xf0	; 0xf0 <USART_init>
    LCD_init();
 3ca:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_init>
    // init led pin
    DDRB |= 0x1C; // 2,3,4
 3ce:	84 b1       	in	r24, 0x04	; 4
 3d0:	8c 61       	ori	r24, 0x1C	; 28
 3d2:	84 b9       	out	0x04, r24	; 4
    temp_threshold = eeprom_read_word(0);
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 73 05 	call	0xae6	; 0xae6 <eeprom_read_word>
 3dc:	4c 01       	movw	r8, r24
    humidity_threshold = eeprom_read_word(2);
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 73 05 	call	0xae6	; 0xae6 <eeprom_read_word>
 3e6:	5c 01       	movw	r10, r24
    light_threshold = eeprom_read_word(4);
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 73 05 	call	0xae6	; 0xae6 <eeprom_read_word>
 3f0:	6c 01       	movw	r12, r24
    return -4;
}

int main(void){
    int temp, humidity, err_code, light, temp_threshold = -1, humidity_threshold = -1, light_threshold = -1;
    char i, j, recv_data[20], loop_count = 0, *p;
 3f2:	31 2c       	mov	r3, r1
                //}
            //}
        }
        
        
        if(loop_count % 10 == 0){ // read rht11 sensor after every 1s                    
 3f4:	0f 2e       	mov	r0, r31
 3f6:	fd ec       	ldi	r31, 0xCD	; 205
 3f8:	2f 2e       	mov	r2, r31
 3fa:	f0 2d       	mov	r31, r0
                LCD_print(mss);
                sprintf(mss, "L:%d.%d%%", light, light);
                LCD_print_pos(1, 0, mss);
               
            } else{
                sprintf(mss, "-1 %d", err_code);
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f8 e2       	ldi	r31, 0x28	; 40
 400:	4f 2e       	mov	r4, r31
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	5f 2e       	mov	r5, r31
 406:	f0 2d       	mov	r31, r0
 408:	8e 01       	movw	r16, r28
 40a:	0b 5f       	subi	r16, 0xFB	; 251
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
            }
        }
        
        if(loop_count >= 55){ // send threshold
            loop_count = 0;
            sprintf(mss, "1 %d %d %d", temp_threshold, humidity_threshold, light_threshold);
 40e:	0f 2e       	mov	r0, r31
 410:	fe e2       	ldi	r31, 0x2E	; 46
 412:	6f 2e       	mov	r6, r31
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	7f 2e       	mov	r7, r31
 418:	f0 2d       	mov	r31, r0
    humidity_threshold = eeprom_read_word(2);
    light_threshold = eeprom_read_word(4);
    //USART_put("Hello from ATmega328p"); 
	while(1){               
        // check uart data received 
        loop_count++;
 41a:	33 94       	inc	r3
        if(recv_done){
 41c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__data_end>
 420:	88 23       	and	r24, r24
 422:	41 f0       	breq	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
            recv_done = 0;
 424:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <__data_end>
			LCD_clear();
 428:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_clear>
			LCD_print("ABC");
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	91 e0       	ldi	r25, 0x01	; 1
 430:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_print>
                //}
            //}
        }
        
        
        if(loop_count % 10 == 0){ // read rht11 sensor after every 1s                    
 434:	32 9c       	mul	r3, r2
 436:	81 2d       	mov	r24, r1
 438:	11 24       	eor	r1, r1
 43a:	86 95       	lsr	r24
 43c:	86 95       	lsr	r24
 43e:	86 95       	lsr	r24
 440:	88 0f       	add	r24, r24
 442:	98 2f       	mov	r25, r24
 444:	99 0f       	add	r25, r25
 446:	99 0f       	add	r25, r25
 448:	89 0f       	add	r24, r25
 44a:	38 12       	cpse	r3, r24
 44c:	61 c0       	rjmp	.+194    	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
            light = ADC_read(5);
 44e:	85 e0       	ldi	r24, 0x05	; 5
 450:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_read>
 454:	7c 01       	movw	r14, r24
            if((err_code = read_dht11(&temp, &humidity)) == 0){ 
 456:	be 01       	movw	r22, r28
 458:	6d 5f       	subi	r22, 0xFD	; 253
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	ce 01       	movw	r24, r28
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	0e 94 27 01 	call	0x24e	; 0x24e <read_dht11>
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	09 f0       	breq	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	42 c0       	rjmp	.+132    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
                sprintf(mss, "0 %d %d %d", temp, humidity, light);
 46a:	ff 92       	push	r15
 46c:	ef 92       	push	r14
 46e:	8c 81       	ldd	r24, Y+4	; 0x04
 470:	8f 93       	push	r24
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	8f 93       	push	r24
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	8f 93       	push	r24
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	8f 93       	push	r24
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	9f 93       	push	r25
 484:	8f 93       	push	r24
 486:	1f 93       	push	r17
 488:	0f 93       	push	r16
 48a:	0e 94 c0 02 	call	0x580	; 0x580 <sprintf>
                USART_put(mss);
 48e:	c8 01       	movw	r24, r16
 490:	0e 94 83 00 	call	0x106	; 0x106 <USART_put>
                // LCD update
                LCD_clear();
 494:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_clear>
                sprintf(mss, "T:%doC, H:%d%%", temp, humidity);
 498:	8c 81       	ldd	r24, Y+4	; 0x04
 49a:	8f 93       	push	r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	8f 93       	push	r24
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	8f 93       	push	r24
 4a4:	89 81       	ldd	r24, Y+1	; 0x01
 4a6:	8f 93       	push	r24
 4a8:	8f e0       	ldi	r24, 0x0F	; 15
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	1f 93       	push	r17
 4b2:	0f 93       	push	r16
 4b4:	0e 94 c0 02 	call	0x580	; 0x580 <sprintf>
                LCD_print(mss);
 4b8:	c8 01       	movw	r24, r16
 4ba:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_print>
                sprintf(mss, "L:%d.%d%%", light, light);
 4be:	ff 92       	push	r15
 4c0:	ef 92       	push	r14
 4c2:	ff 92       	push	r15
 4c4:	ef 92       	push	r14
 4c6:	8e e1       	ldi	r24, 0x1E	; 30
 4c8:	91 e0       	ldi	r25, 0x01	; 1
 4ca:	9f 93       	push	r25
 4cc:	8f 93       	push	r24
 4ce:	1f 93       	push	r17
 4d0:	0f 93       	push	r16
 4d2:	0e 94 c0 02 	call	0x580	; 0x580 <sprintf>

void LCD_print_pos(char row, char pos, char *str){
    if(row == 0 && pos < 16) // line 1
        LCD_action((pos & 0x0F)|0x80);
    else if(row == 1 && pos < 16) // line 2
        LCD_action((pos & 0x0F)|0xC0);
 4d6:	80 ec       	ldi	r24, 0xC0	; 192
 4d8:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_action>
    LCD_print(str);
 4dc:	c8 01       	movw	r24, r16
 4de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_print>
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	11 c0       	rjmp	.+34     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
                LCD_print(mss);
                sprintf(mss, "L:%d.%d%%", light, light);
                LCD_print_pos(1, 0, mss);
               
            } else{
                sprintf(mss, "-1 %d", err_code);
 4ee:	9f 93       	push	r25
 4f0:	8f 93       	push	r24
 4f2:	5f 92       	push	r5
 4f4:	4f 92       	push	r4
 4f6:	1f 93       	push	r17
 4f8:	0f 93       	push	r16
 4fa:	0e 94 c0 02 	call	0x580	; 0x580 <sprintf>
                USART_put(mss);
 4fe:	c8 01       	movw	r24, r16
 500:	0e 94 83 00 	call	0x106	; 0x106 <USART_put>
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
            }
        }
        
        if(loop_count >= 55){ // send threshold
 510:	96 e3       	ldi	r25, 0x36	; 54
 512:	93 15       	cp	r25, r3
 514:	a8 f4       	brcc	.+42     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
            loop_count = 0;
            sprintf(mss, "1 %d %d %d", temp_threshold, humidity_threshold, light_threshold);
 516:	df 92       	push	r13
 518:	cf 92       	push	r12
 51a:	bf 92       	push	r11
 51c:	af 92       	push	r10
 51e:	9f 92       	push	r9
 520:	8f 92       	push	r8
 522:	7f 92       	push	r7
 524:	6f 92       	push	r6
 526:	1f 93       	push	r17
 528:	0f 93       	push	r16
 52a:	0e 94 c0 02 	call	0x580	; 0x580 <sprintf>
            USART_put(mss);
 52e:	c8 01       	movw	r24, r16
 530:	0e 94 83 00 	call	0x106	; 0x106 <USART_put>
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	f8 94       	cli
 538:	de bf       	out	0x3e, r29	; 62
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	cd bf       	out	0x3d, r28	; 61
                USART_put(mss);
            }
        }
        
        if(loop_count >= 55){ // send threshold
            loop_count = 0;
 53e:	31 2c       	mov	r3, r1
            sprintf(mss, "1 %d %d %d", temp_threshold, humidity_threshold, light_threshold);
            USART_put(mss);
        }
        
        // check threshold 
        if(temp_threshold < temp) PORTB |= (1 << 2); else PORTB &= ~(1 << 2);
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	9a 81       	ldd	r25, Y+2	; 0x02
 544:	88 16       	cp	r8, r24
 546:	99 06       	cpc	r9, r25
 548:	14 f4       	brge	.+4      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 54a:	2a 9a       	sbi	0x05, 2	; 5
 54c:	01 c0       	rjmp	.+2      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
 54e:	2a 98       	cbi	0x05, 2	; 5
        if(humidity_threshold < humidity) PORTB |= (1 << 3); else PORTB &= ~(1 << 3);
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	9c 81       	ldd	r25, Y+4	; 0x04
 554:	a8 16       	cp	r10, r24
 556:	b9 06       	cpc	r11, r25
 558:	14 f4       	brge	.+4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55a:	2b 9a       	sbi	0x05, 3	; 5
 55c:	01 c0       	rjmp	.+2      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 55e:	2b 98       	cbi	0x05, 3	; 5
        if(light_threshold > light) PORTB |= (1 << 4); else PORTB &= ~(1 << 4);
 560:	ec 14       	cp	r14, r12
 562:	fd 04       	cpc	r15, r13
 564:	14 f4       	brge	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 566:	2c 9a       	sbi	0x05, 4	; 5
 568:	01 c0       	rjmp	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56a:	2c 98       	cbi	0x05, 4	; 5
 56c:	9f ef       	ldi	r25, 0xFF	; 255
 56e:	2f e5       	ldi	r18, 0x5F	; 95
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	91 50       	subi	r25, 0x01	; 1
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	80 40       	sbci	r24, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
 57c:	00 00       	nop
 57e:	4d cf       	rjmp	.-358    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

00000580 <sprintf>:
 580:	ae e0       	ldi	r26, 0x0E	; 14
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	e6 ec       	ldi	r30, 0xC6	; 198
 586:	f2 e0       	ldi	r31, 0x02	; 2
 588:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__prologue_saves__+0x1c>
 58c:	0d 89       	ldd	r16, Y+21	; 0x15
 58e:	1e 89       	ldd	r17, Y+22	; 0x16
 590:	86 e0       	ldi	r24, 0x06	; 6
 592:	8c 83       	std	Y+4, r24	; 0x04
 594:	1a 83       	std	Y+2, r17	; 0x02
 596:	09 83       	std	Y+1, r16	; 0x01
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	9f e7       	ldi	r25, 0x7F	; 127
 59c:	9e 83       	std	Y+6, r25	; 0x06
 59e:	8d 83       	std	Y+5, r24	; 0x05
 5a0:	ae 01       	movw	r20, r28
 5a2:	47 5e       	subi	r20, 0xE7	; 231
 5a4:	5f 4f       	sbci	r21, 0xFF	; 255
 5a6:	6f 89       	ldd	r22, Y+23	; 0x17
 5a8:	78 8d       	ldd	r23, Y+24	; 0x18
 5aa:	ce 01       	movw	r24, r28
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <vfprintf>
 5b2:	ef 81       	ldd	r30, Y+7	; 0x07
 5b4:	f8 85       	ldd	r31, Y+8	; 0x08
 5b6:	e0 0f       	add	r30, r16
 5b8:	f1 1f       	adc	r31, r17
 5ba:	10 82       	st	Z, r1
 5bc:	2e 96       	adiw	r28, 0x0e	; 14
 5be:	e4 e0       	ldi	r30, 0x04	; 4
 5c0:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__epilogue_restores__+0x1c>

000005c4 <vfprintf>:
 5c4:	ab e0       	ldi	r26, 0x0B	; 11
 5c6:	b0 e0       	ldi	r27, 0x00	; 0
 5c8:	e8 ee       	ldi	r30, 0xE8	; 232
 5ca:	f2 e0       	ldi	r31, 0x02	; 2
 5cc:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__prologue_saves__>
 5d0:	6c 01       	movw	r12, r24
 5d2:	7b 01       	movw	r14, r22
 5d4:	8a 01       	movw	r16, r20
 5d6:	fc 01       	movw	r30, r24
 5d8:	17 82       	std	Z+7, r1	; 0x07
 5da:	16 82       	std	Z+6, r1	; 0x06
 5dc:	83 81       	ldd	r24, Z+3	; 0x03
 5de:	81 ff       	sbrs	r24, 1
 5e0:	cc c1       	rjmp	.+920    	; 0x97a <__stack+0x7b>
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	3c 01       	movw	r6, r24
 5e8:	f6 01       	movw	r30, r12
 5ea:	93 81       	ldd	r25, Z+3	; 0x03
 5ec:	f7 01       	movw	r30, r14
 5ee:	93 fd       	sbrc	r25, 3
 5f0:	85 91       	lpm	r24, Z+
 5f2:	93 ff       	sbrs	r25, 3
 5f4:	81 91       	ld	r24, Z+
 5f6:	7f 01       	movw	r14, r30
 5f8:	88 23       	and	r24, r24
 5fa:	09 f4       	brne	.+2      	; 0x5fe <vfprintf+0x3a>
 5fc:	ba c1       	rjmp	.+884    	; 0x972 <__stack+0x73>
 5fe:	85 32       	cpi	r24, 0x25	; 37
 600:	39 f4       	brne	.+14     	; 0x610 <vfprintf+0x4c>
 602:	93 fd       	sbrc	r25, 3
 604:	85 91       	lpm	r24, Z+
 606:	93 ff       	sbrs	r25, 3
 608:	81 91       	ld	r24, Z+
 60a:	7f 01       	movw	r14, r30
 60c:	85 32       	cpi	r24, 0x25	; 37
 60e:	29 f4       	brne	.+10     	; 0x61a <vfprintf+0x56>
 610:	b6 01       	movw	r22, r12
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 618:	e7 cf       	rjmp	.-50     	; 0x5e8 <vfprintf+0x24>
 61a:	91 2c       	mov	r9, r1
 61c:	21 2c       	mov	r2, r1
 61e:	31 2c       	mov	r3, r1
 620:	ff e1       	ldi	r31, 0x1F	; 31
 622:	f3 15       	cp	r31, r3
 624:	d8 f0       	brcs	.+54     	; 0x65c <vfprintf+0x98>
 626:	8b 32       	cpi	r24, 0x2B	; 43
 628:	79 f0       	breq	.+30     	; 0x648 <vfprintf+0x84>
 62a:	38 f4       	brcc	.+14     	; 0x63a <vfprintf+0x76>
 62c:	80 32       	cpi	r24, 0x20	; 32
 62e:	79 f0       	breq	.+30     	; 0x64e <vfprintf+0x8a>
 630:	83 32       	cpi	r24, 0x23	; 35
 632:	a1 f4       	brne	.+40     	; 0x65c <vfprintf+0x98>
 634:	23 2d       	mov	r18, r3
 636:	20 61       	ori	r18, 0x10	; 16
 638:	1d c0       	rjmp	.+58     	; 0x674 <vfprintf+0xb0>
 63a:	8d 32       	cpi	r24, 0x2D	; 45
 63c:	61 f0       	breq	.+24     	; 0x656 <vfprintf+0x92>
 63e:	80 33       	cpi	r24, 0x30	; 48
 640:	69 f4       	brne	.+26     	; 0x65c <vfprintf+0x98>
 642:	23 2d       	mov	r18, r3
 644:	21 60       	ori	r18, 0x01	; 1
 646:	16 c0       	rjmp	.+44     	; 0x674 <vfprintf+0xb0>
 648:	83 2d       	mov	r24, r3
 64a:	82 60       	ori	r24, 0x02	; 2
 64c:	38 2e       	mov	r3, r24
 64e:	e3 2d       	mov	r30, r3
 650:	e4 60       	ori	r30, 0x04	; 4
 652:	3e 2e       	mov	r3, r30
 654:	2a c0       	rjmp	.+84     	; 0x6aa <vfprintf+0xe6>
 656:	f3 2d       	mov	r31, r3
 658:	f8 60       	ori	r31, 0x08	; 8
 65a:	1d c0       	rjmp	.+58     	; 0x696 <vfprintf+0xd2>
 65c:	37 fc       	sbrc	r3, 7
 65e:	2d c0       	rjmp	.+90     	; 0x6ba <vfprintf+0xf6>
 660:	20 ed       	ldi	r18, 0xD0	; 208
 662:	28 0f       	add	r18, r24
 664:	2a 30       	cpi	r18, 0x0A	; 10
 666:	40 f0       	brcs	.+16     	; 0x678 <vfprintf+0xb4>
 668:	8e 32       	cpi	r24, 0x2E	; 46
 66a:	b9 f4       	brne	.+46     	; 0x69a <vfprintf+0xd6>
 66c:	36 fc       	sbrc	r3, 6
 66e:	81 c1       	rjmp	.+770    	; 0x972 <__stack+0x73>
 670:	23 2d       	mov	r18, r3
 672:	20 64       	ori	r18, 0x40	; 64
 674:	32 2e       	mov	r3, r18
 676:	19 c0       	rjmp	.+50     	; 0x6aa <vfprintf+0xe6>
 678:	36 fe       	sbrs	r3, 6
 67a:	06 c0       	rjmp	.+12     	; 0x688 <vfprintf+0xc4>
 67c:	8a e0       	ldi	r24, 0x0A	; 10
 67e:	98 9e       	mul	r9, r24
 680:	20 0d       	add	r18, r0
 682:	11 24       	eor	r1, r1
 684:	92 2e       	mov	r9, r18
 686:	11 c0       	rjmp	.+34     	; 0x6aa <vfprintf+0xe6>
 688:	ea e0       	ldi	r30, 0x0A	; 10
 68a:	2e 9e       	mul	r2, r30
 68c:	20 0d       	add	r18, r0
 68e:	11 24       	eor	r1, r1
 690:	22 2e       	mov	r2, r18
 692:	f3 2d       	mov	r31, r3
 694:	f0 62       	ori	r31, 0x20	; 32
 696:	3f 2e       	mov	r3, r31
 698:	08 c0       	rjmp	.+16     	; 0x6aa <vfprintf+0xe6>
 69a:	8c 36       	cpi	r24, 0x6C	; 108
 69c:	21 f4       	brne	.+8      	; 0x6a6 <vfprintf+0xe2>
 69e:	83 2d       	mov	r24, r3
 6a0:	80 68       	ori	r24, 0x80	; 128
 6a2:	38 2e       	mov	r3, r24
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <vfprintf+0xe6>
 6a6:	88 36       	cpi	r24, 0x68	; 104
 6a8:	41 f4       	brne	.+16     	; 0x6ba <vfprintf+0xf6>
 6aa:	f7 01       	movw	r30, r14
 6ac:	93 fd       	sbrc	r25, 3
 6ae:	85 91       	lpm	r24, Z+
 6b0:	93 ff       	sbrs	r25, 3
 6b2:	81 91       	ld	r24, Z+
 6b4:	7f 01       	movw	r14, r30
 6b6:	81 11       	cpse	r24, r1
 6b8:	b3 cf       	rjmp	.-154    	; 0x620 <vfprintf+0x5c>
 6ba:	98 2f       	mov	r25, r24
 6bc:	9f 7d       	andi	r25, 0xDF	; 223
 6be:	95 54       	subi	r25, 0x45	; 69
 6c0:	93 30       	cpi	r25, 0x03	; 3
 6c2:	28 f4       	brcc	.+10     	; 0x6ce <vfprintf+0x10a>
 6c4:	0c 5f       	subi	r16, 0xFC	; 252
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	9f e3       	ldi	r25, 0x3F	; 63
 6ca:	99 83       	std	Y+1, r25	; 0x01
 6cc:	0d c0       	rjmp	.+26     	; 0x6e8 <vfprintf+0x124>
 6ce:	83 36       	cpi	r24, 0x63	; 99
 6d0:	31 f0       	breq	.+12     	; 0x6de <vfprintf+0x11a>
 6d2:	83 37       	cpi	r24, 0x73	; 115
 6d4:	71 f0       	breq	.+28     	; 0x6f2 <vfprintf+0x12e>
 6d6:	83 35       	cpi	r24, 0x53	; 83
 6d8:	09 f0       	breq	.+2      	; 0x6dc <vfprintf+0x118>
 6da:	59 c0       	rjmp	.+178    	; 0x78e <vfprintf+0x1ca>
 6dc:	21 c0       	rjmp	.+66     	; 0x720 <vfprintf+0x15c>
 6de:	f8 01       	movw	r30, r16
 6e0:	80 81       	ld	r24, Z
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	0e 5f       	subi	r16, 0xFE	; 254
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	88 24       	eor	r8, r8
 6ea:	83 94       	inc	r8
 6ec:	91 2c       	mov	r9, r1
 6ee:	53 01       	movw	r10, r6
 6f0:	13 c0       	rjmp	.+38     	; 0x718 <vfprintf+0x154>
 6f2:	28 01       	movw	r4, r16
 6f4:	f2 e0       	ldi	r31, 0x02	; 2
 6f6:	4f 0e       	add	r4, r31
 6f8:	51 1c       	adc	r5, r1
 6fa:	f8 01       	movw	r30, r16
 6fc:	a0 80       	ld	r10, Z
 6fe:	b1 80       	ldd	r11, Z+1	; 0x01
 700:	36 fe       	sbrs	r3, 6
 702:	03 c0       	rjmp	.+6      	; 0x70a <vfprintf+0x146>
 704:	69 2d       	mov	r22, r9
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <vfprintf+0x14a>
 70a:	6f ef       	ldi	r22, 0xFF	; 255
 70c:	7f ef       	ldi	r23, 0xFF	; 255
 70e:	c5 01       	movw	r24, r10
 710:	0e 94 ce 04 	call	0x99c	; 0x99c <strnlen>
 714:	4c 01       	movw	r8, r24
 716:	82 01       	movw	r16, r4
 718:	f3 2d       	mov	r31, r3
 71a:	ff 77       	andi	r31, 0x7F	; 127
 71c:	3f 2e       	mov	r3, r31
 71e:	16 c0       	rjmp	.+44     	; 0x74c <vfprintf+0x188>
 720:	28 01       	movw	r4, r16
 722:	22 e0       	ldi	r18, 0x02	; 2
 724:	42 0e       	add	r4, r18
 726:	51 1c       	adc	r5, r1
 728:	f8 01       	movw	r30, r16
 72a:	a0 80       	ld	r10, Z
 72c:	b1 80       	ldd	r11, Z+1	; 0x01
 72e:	36 fe       	sbrs	r3, 6
 730:	03 c0       	rjmp	.+6      	; 0x738 <vfprintf+0x174>
 732:	69 2d       	mov	r22, r9
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <vfprintf+0x178>
 738:	6f ef       	ldi	r22, 0xFF	; 255
 73a:	7f ef       	ldi	r23, 0xFF	; 255
 73c:	c5 01       	movw	r24, r10
 73e:	0e 94 c3 04 	call	0x986	; 0x986 <strnlen_P>
 742:	4c 01       	movw	r8, r24
 744:	f3 2d       	mov	r31, r3
 746:	f0 68       	ori	r31, 0x80	; 128
 748:	3f 2e       	mov	r3, r31
 74a:	82 01       	movw	r16, r4
 74c:	33 fc       	sbrc	r3, 3
 74e:	1b c0       	rjmp	.+54     	; 0x786 <vfprintf+0x1c2>
 750:	82 2d       	mov	r24, r2
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	88 16       	cp	r8, r24
 756:	99 06       	cpc	r9, r25
 758:	b0 f4       	brcc	.+44     	; 0x786 <vfprintf+0x1c2>
 75a:	b6 01       	movw	r22, r12
 75c:	80 e2       	ldi	r24, 0x20	; 32
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 764:	2a 94       	dec	r2
 766:	f4 cf       	rjmp	.-24     	; 0x750 <vfprintf+0x18c>
 768:	f5 01       	movw	r30, r10
 76a:	37 fc       	sbrc	r3, 7
 76c:	85 91       	lpm	r24, Z+
 76e:	37 fe       	sbrs	r3, 7
 770:	81 91       	ld	r24, Z+
 772:	5f 01       	movw	r10, r30
 774:	b6 01       	movw	r22, r12
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 77c:	21 10       	cpse	r2, r1
 77e:	2a 94       	dec	r2
 780:	21 e0       	ldi	r18, 0x01	; 1
 782:	82 1a       	sub	r8, r18
 784:	91 08       	sbc	r9, r1
 786:	81 14       	cp	r8, r1
 788:	91 04       	cpc	r9, r1
 78a:	71 f7       	brne	.-36     	; 0x768 <vfprintf+0x1a4>
 78c:	e8 c0       	rjmp	.+464    	; 0x95e <__stack+0x5f>
 78e:	84 36       	cpi	r24, 0x64	; 100
 790:	11 f0       	breq	.+4      	; 0x796 <vfprintf+0x1d2>
 792:	89 36       	cpi	r24, 0x69	; 105
 794:	41 f5       	brne	.+80     	; 0x7e6 <vfprintf+0x222>
 796:	f8 01       	movw	r30, r16
 798:	37 fe       	sbrs	r3, 7
 79a:	07 c0       	rjmp	.+14     	; 0x7aa <vfprintf+0x1e6>
 79c:	60 81       	ld	r22, Z
 79e:	71 81       	ldd	r23, Z+1	; 0x01
 7a0:	82 81       	ldd	r24, Z+2	; 0x02
 7a2:	93 81       	ldd	r25, Z+3	; 0x03
 7a4:	0c 5f       	subi	r16, 0xFC	; 252
 7a6:	1f 4f       	sbci	r17, 0xFF	; 255
 7a8:	08 c0       	rjmp	.+16     	; 0x7ba <vfprintf+0x1f6>
 7aa:	60 81       	ld	r22, Z
 7ac:	71 81       	ldd	r23, Z+1	; 0x01
 7ae:	07 2e       	mov	r0, r23
 7b0:	00 0c       	add	r0, r0
 7b2:	88 0b       	sbc	r24, r24
 7b4:	99 0b       	sbc	r25, r25
 7b6:	0e 5f       	subi	r16, 0xFE	; 254
 7b8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ba:	f3 2d       	mov	r31, r3
 7bc:	ff 76       	andi	r31, 0x6F	; 111
 7be:	3f 2e       	mov	r3, r31
 7c0:	97 ff       	sbrs	r25, 7
 7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <vfprintf+0x212>
 7c4:	90 95       	com	r25
 7c6:	80 95       	com	r24
 7c8:	70 95       	com	r23
 7ca:	61 95       	neg	r22
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255
 7ce:	8f 4f       	sbci	r24, 0xFF	; 255
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	f0 68       	ori	r31, 0x80	; 128
 7d4:	3f 2e       	mov	r3, r31
 7d6:	2a e0       	ldi	r18, 0x0A	; 10
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	a3 01       	movw	r20, r6
 7dc:	0e 94 15 05 	call	0xa2a	; 0xa2a <__ultoa_invert>
 7e0:	88 2e       	mov	r8, r24
 7e2:	86 18       	sub	r8, r6
 7e4:	45 c0       	rjmp	.+138    	; 0x870 <vfprintf+0x2ac>
 7e6:	85 37       	cpi	r24, 0x75	; 117
 7e8:	31 f4       	brne	.+12     	; 0x7f6 <vfprintf+0x232>
 7ea:	23 2d       	mov	r18, r3
 7ec:	2f 7e       	andi	r18, 0xEF	; 239
 7ee:	b2 2e       	mov	r11, r18
 7f0:	2a e0       	ldi	r18, 0x0A	; 10
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	25 c0       	rjmp	.+74     	; 0x840 <vfprintf+0x27c>
 7f6:	93 2d       	mov	r25, r3
 7f8:	99 7f       	andi	r25, 0xF9	; 249
 7fa:	b9 2e       	mov	r11, r25
 7fc:	8f 36       	cpi	r24, 0x6F	; 111
 7fe:	c1 f0       	breq	.+48     	; 0x830 <vfprintf+0x26c>
 800:	18 f4       	brcc	.+6      	; 0x808 <vfprintf+0x244>
 802:	88 35       	cpi	r24, 0x58	; 88
 804:	79 f0       	breq	.+30     	; 0x824 <vfprintf+0x260>
 806:	b5 c0       	rjmp	.+362    	; 0x972 <__stack+0x73>
 808:	80 37       	cpi	r24, 0x70	; 112
 80a:	19 f0       	breq	.+6      	; 0x812 <vfprintf+0x24e>
 80c:	88 37       	cpi	r24, 0x78	; 120
 80e:	21 f0       	breq	.+8      	; 0x818 <vfprintf+0x254>
 810:	b0 c0       	rjmp	.+352    	; 0x972 <__stack+0x73>
 812:	e9 2f       	mov	r30, r25
 814:	e0 61       	ori	r30, 0x10	; 16
 816:	be 2e       	mov	r11, r30
 818:	b4 fe       	sbrs	r11, 4
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x272>
 81c:	fb 2d       	mov	r31, r11
 81e:	f4 60       	ori	r31, 0x04	; 4
 820:	bf 2e       	mov	r11, r31
 822:	09 c0       	rjmp	.+18     	; 0x836 <vfprintf+0x272>
 824:	34 fe       	sbrs	r3, 4
 826:	0a c0       	rjmp	.+20     	; 0x83c <vfprintf+0x278>
 828:	29 2f       	mov	r18, r25
 82a:	26 60       	ori	r18, 0x06	; 6
 82c:	b2 2e       	mov	r11, r18
 82e:	06 c0       	rjmp	.+12     	; 0x83c <vfprintf+0x278>
 830:	28 e0       	ldi	r18, 0x08	; 8
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	05 c0       	rjmp	.+10     	; 0x840 <vfprintf+0x27c>
 836:	20 e1       	ldi	r18, 0x10	; 16
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <vfprintf+0x27c>
 83c:	20 e1       	ldi	r18, 0x10	; 16
 83e:	32 e0       	ldi	r19, 0x02	; 2
 840:	f8 01       	movw	r30, r16
 842:	b7 fe       	sbrs	r11, 7
 844:	07 c0       	rjmp	.+14     	; 0x854 <vfprintf+0x290>
 846:	60 81       	ld	r22, Z
 848:	71 81       	ldd	r23, Z+1	; 0x01
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	93 81       	ldd	r25, Z+3	; 0x03
 84e:	0c 5f       	subi	r16, 0xFC	; 252
 850:	1f 4f       	sbci	r17, 0xFF	; 255
 852:	06 c0       	rjmp	.+12     	; 0x860 <vfprintf+0x29c>
 854:	60 81       	ld	r22, Z
 856:	71 81       	ldd	r23, Z+1	; 0x01
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 5f       	subi	r16, 0xFE	; 254
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
 860:	a3 01       	movw	r20, r6
 862:	0e 94 15 05 	call	0xa2a	; 0xa2a <__ultoa_invert>
 866:	88 2e       	mov	r8, r24
 868:	86 18       	sub	r8, r6
 86a:	fb 2d       	mov	r31, r11
 86c:	ff 77       	andi	r31, 0x7F	; 127
 86e:	3f 2e       	mov	r3, r31
 870:	36 fe       	sbrs	r3, 6
 872:	0d c0       	rjmp	.+26     	; 0x88e <vfprintf+0x2ca>
 874:	23 2d       	mov	r18, r3
 876:	2e 7f       	andi	r18, 0xFE	; 254
 878:	a2 2e       	mov	r10, r18
 87a:	89 14       	cp	r8, r9
 87c:	58 f4       	brcc	.+22     	; 0x894 <vfprintf+0x2d0>
 87e:	34 fe       	sbrs	r3, 4
 880:	0b c0       	rjmp	.+22     	; 0x898 <vfprintf+0x2d4>
 882:	32 fc       	sbrc	r3, 2
 884:	09 c0       	rjmp	.+18     	; 0x898 <vfprintf+0x2d4>
 886:	83 2d       	mov	r24, r3
 888:	8e 7e       	andi	r24, 0xEE	; 238
 88a:	a8 2e       	mov	r10, r24
 88c:	05 c0       	rjmp	.+10     	; 0x898 <vfprintf+0x2d4>
 88e:	b8 2c       	mov	r11, r8
 890:	a3 2c       	mov	r10, r3
 892:	03 c0       	rjmp	.+6      	; 0x89a <vfprintf+0x2d6>
 894:	b8 2c       	mov	r11, r8
 896:	01 c0       	rjmp	.+2      	; 0x89a <vfprintf+0x2d6>
 898:	b9 2c       	mov	r11, r9
 89a:	a4 fe       	sbrs	r10, 4
 89c:	0f c0       	rjmp	.+30     	; 0x8bc <vfprintf+0x2f8>
 89e:	fe 01       	movw	r30, r28
 8a0:	e8 0d       	add	r30, r8
 8a2:	f1 1d       	adc	r31, r1
 8a4:	80 81       	ld	r24, Z
 8a6:	80 33       	cpi	r24, 0x30	; 48
 8a8:	21 f4       	brne	.+8      	; 0x8b2 <vfprintf+0x2ee>
 8aa:	9a 2d       	mov	r25, r10
 8ac:	99 7e       	andi	r25, 0xE9	; 233
 8ae:	a9 2e       	mov	r10, r25
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <vfprintf+0x300>
 8b2:	a2 fe       	sbrs	r10, 2
 8b4:	06 c0       	rjmp	.+12     	; 0x8c2 <vfprintf+0x2fe>
 8b6:	b3 94       	inc	r11
 8b8:	b3 94       	inc	r11
 8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <vfprintf+0x300>
 8bc:	8a 2d       	mov	r24, r10
 8be:	86 78       	andi	r24, 0x86	; 134
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <vfprintf+0x300>
 8c2:	b3 94       	inc	r11
 8c4:	a3 fc       	sbrc	r10, 3
 8c6:	11 c0       	rjmp	.+34     	; 0x8ea <vfprintf+0x326>
 8c8:	a0 fe       	sbrs	r10, 0
 8ca:	06 c0       	rjmp	.+12     	; 0x8d8 <vfprintf+0x314>
 8cc:	b2 14       	cp	r11, r2
 8ce:	88 f4       	brcc	.+34     	; 0x8f2 <vfprintf+0x32e>
 8d0:	28 0c       	add	r2, r8
 8d2:	92 2c       	mov	r9, r2
 8d4:	9b 18       	sub	r9, r11
 8d6:	0e c0       	rjmp	.+28     	; 0x8f4 <vfprintf+0x330>
 8d8:	b2 14       	cp	r11, r2
 8da:	60 f4       	brcc	.+24     	; 0x8f4 <vfprintf+0x330>
 8dc:	b6 01       	movw	r22, r12
 8de:	80 e2       	ldi	r24, 0x20	; 32
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 8e6:	b3 94       	inc	r11
 8e8:	f7 cf       	rjmp	.-18     	; 0x8d8 <vfprintf+0x314>
 8ea:	b2 14       	cp	r11, r2
 8ec:	18 f4       	brcc	.+6      	; 0x8f4 <vfprintf+0x330>
 8ee:	2b 18       	sub	r2, r11
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x332>
 8f2:	98 2c       	mov	r9, r8
 8f4:	21 2c       	mov	r2, r1
 8f6:	a4 fe       	sbrs	r10, 4
 8f8:	10 c0       	rjmp	.+32     	; 0x91a <__stack+0x1b>
 8fa:	b6 01       	movw	r22, r12
 8fc:	80 e3       	ldi	r24, 0x30	; 48
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 904:	a2 fe       	sbrs	r10, 2
 906:	17 c0       	rjmp	.+46     	; 0x936 <__stack+0x37>
 908:	a1 fc       	sbrc	r10, 1
 90a:	03 c0       	rjmp	.+6      	; 0x912 <__stack+0x13>
 90c:	88 e7       	ldi	r24, 0x78	; 120
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0x17>
 912:	88 e5       	ldi	r24, 0x58	; 88
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	b6 01       	movw	r22, r12
 918:	0c c0       	rjmp	.+24     	; 0x932 <__stack+0x33>
 91a:	8a 2d       	mov	r24, r10
 91c:	86 78       	andi	r24, 0x86	; 134
 91e:	59 f0       	breq	.+22     	; 0x936 <__stack+0x37>
 920:	a1 fe       	sbrs	r10, 1
 922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
 924:	8b e2       	ldi	r24, 0x2B	; 43
 926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
 928:	80 e2       	ldi	r24, 0x20	; 32
 92a:	a7 fc       	sbrc	r10, 7
 92c:	8d e2       	ldi	r24, 0x2D	; 45
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 936:	89 14       	cp	r8, r9
 938:	38 f4       	brcc	.+14     	; 0x948 <__stack+0x49>
 93a:	b6 01       	movw	r22, r12
 93c:	80 e3       	ldi	r24, 0x30	; 48
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 944:	9a 94       	dec	r9
 946:	f7 cf       	rjmp	.-18     	; 0x936 <__stack+0x37>
 948:	8a 94       	dec	r8
 94a:	f3 01       	movw	r30, r6
 94c:	e8 0d       	add	r30, r8
 94e:	f1 1d       	adc	r31, r1
 950:	80 81       	ld	r24, Z
 952:	b6 01       	movw	r22, r12
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 95a:	81 10       	cpse	r8, r1
 95c:	f5 cf       	rjmp	.-22     	; 0x948 <__stack+0x49>
 95e:	22 20       	and	r2, r2
 960:	09 f4       	brne	.+2      	; 0x964 <__stack+0x65>
 962:	42 ce       	rjmp	.-892    	; 0x5e8 <vfprintf+0x24>
 964:	b6 01       	movw	r22, r12
 966:	80 e2       	ldi	r24, 0x20	; 32
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <fputc>
 96e:	2a 94       	dec	r2
 970:	f6 cf       	rjmp	.-20     	; 0x95e <__stack+0x5f>
 972:	f6 01       	movw	r30, r12
 974:	86 81       	ldd	r24, Z+6	; 0x06
 976:	97 81       	ldd	r25, Z+7	; 0x07
 978:	02 c0       	rjmp	.+4      	; 0x97e <__stack+0x7f>
 97a:	8f ef       	ldi	r24, 0xFF	; 255
 97c:	9f ef       	ldi	r25, 0xFF	; 255
 97e:	2b 96       	adiw	r28, 0x0b	; 11
 980:	e2 e1       	ldi	r30, 0x12	; 18
 982:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__epilogue_restores__>

00000986 <strnlen_P>:
 986:	fc 01       	movw	r30, r24
 988:	05 90       	lpm	r0, Z+
 98a:	61 50       	subi	r22, 0x01	; 1
 98c:	70 40       	sbci	r23, 0x00	; 0
 98e:	01 10       	cpse	r0, r1
 990:	d8 f7       	brcc	.-10     	; 0x988 <strnlen_P+0x2>
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	8e 0f       	add	r24, r30
 998:	9f 1f       	adc	r25, r31
 99a:	08 95       	ret

0000099c <strnlen>:
 99c:	fc 01       	movw	r30, r24
 99e:	61 50       	subi	r22, 0x01	; 1
 9a0:	70 40       	sbci	r23, 0x00	; 0
 9a2:	01 90       	ld	r0, Z+
 9a4:	01 10       	cpse	r0, r1
 9a6:	d8 f7       	brcc	.-10     	; 0x99e <strnlen+0x2>
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	8e 0f       	add	r24, r30
 9ae:	9f 1f       	adc	r25, r31
 9b0:	08 95       	ret

000009b2 <fputc>:
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	fb 01       	movw	r30, r22
 9bc:	23 81       	ldd	r18, Z+3	; 0x03
 9be:	21 fd       	sbrc	r18, 1
 9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <fputc+0x16>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	9f ef       	ldi	r25, 0xFF	; 255
 9c6:	2c c0       	rjmp	.+88     	; 0xa20 <fputc+0x6e>
 9c8:	22 ff       	sbrs	r18, 2
 9ca:	16 c0       	rjmp	.+44     	; 0x9f8 <fputc+0x46>
 9cc:	46 81       	ldd	r20, Z+6	; 0x06
 9ce:	57 81       	ldd	r21, Z+7	; 0x07
 9d0:	24 81       	ldd	r18, Z+4	; 0x04
 9d2:	35 81       	ldd	r19, Z+5	; 0x05
 9d4:	42 17       	cp	r20, r18
 9d6:	53 07       	cpc	r21, r19
 9d8:	44 f4       	brge	.+16     	; 0x9ea <fputc+0x38>
 9da:	a0 81       	ld	r26, Z
 9dc:	b1 81       	ldd	r27, Z+1	; 0x01
 9de:	9d 01       	movw	r18, r26
 9e0:	2f 5f       	subi	r18, 0xFF	; 255
 9e2:	3f 4f       	sbci	r19, 0xFF	; 255
 9e4:	31 83       	std	Z+1, r19	; 0x01
 9e6:	20 83       	st	Z, r18
 9e8:	8c 93       	st	X, r24
 9ea:	26 81       	ldd	r18, Z+6	; 0x06
 9ec:	37 81       	ldd	r19, Z+7	; 0x07
 9ee:	2f 5f       	subi	r18, 0xFF	; 255
 9f0:	3f 4f       	sbci	r19, 0xFF	; 255
 9f2:	37 83       	std	Z+7, r19	; 0x07
 9f4:	26 83       	std	Z+6, r18	; 0x06
 9f6:	14 c0       	rjmp	.+40     	; 0xa20 <fputc+0x6e>
 9f8:	8b 01       	movw	r16, r22
 9fa:	ec 01       	movw	r28, r24
 9fc:	fb 01       	movw	r30, r22
 9fe:	00 84       	ldd	r0, Z+8	; 0x08
 a00:	f1 85       	ldd	r31, Z+9	; 0x09
 a02:	e0 2d       	mov	r30, r0
 a04:	09 95       	icall
 a06:	89 2b       	or	r24, r25
 a08:	e1 f6       	brne	.-72     	; 0x9c2 <fputc+0x10>
 a0a:	d8 01       	movw	r26, r16
 a0c:	16 96       	adiw	r26, 0x06	; 6
 a0e:	8d 91       	ld	r24, X+
 a10:	9c 91       	ld	r25, X
 a12:	17 97       	sbiw	r26, 0x07	; 7
 a14:	01 96       	adiw	r24, 0x01	; 1
 a16:	17 96       	adiw	r26, 0x07	; 7
 a18:	9c 93       	st	X, r25
 a1a:	8e 93       	st	-X, r24
 a1c:	16 97       	sbiw	r26, 0x06	; 6
 a1e:	ce 01       	movw	r24, r28
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	08 95       	ret

00000a2a <__ultoa_invert>:
 a2a:	fa 01       	movw	r30, r20
 a2c:	aa 27       	eor	r26, r26
 a2e:	28 30       	cpi	r18, 0x08	; 8
 a30:	51 f1       	breq	.+84     	; 0xa86 <__ultoa_invert+0x5c>
 a32:	20 31       	cpi	r18, 0x10	; 16
 a34:	81 f1       	breq	.+96     	; 0xa96 <__ultoa_invert+0x6c>
 a36:	e8 94       	clt
 a38:	6f 93       	push	r22
 a3a:	6e 7f       	andi	r22, 0xFE	; 254
 a3c:	6e 5f       	subi	r22, 0xFE	; 254
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255
 a40:	8f 4f       	sbci	r24, 0xFF	; 255
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	af 4f       	sbci	r26, 0xFF	; 255
 a46:	b1 e0       	ldi	r27, 0x01	; 1
 a48:	3e d0       	rcall	.+124    	; 0xac6 <__ultoa_invert+0x9c>
 a4a:	b4 e0       	ldi	r27, 0x04	; 4
 a4c:	3c d0       	rcall	.+120    	; 0xac6 <__ultoa_invert+0x9c>
 a4e:	67 0f       	add	r22, r23
 a50:	78 1f       	adc	r23, r24
 a52:	89 1f       	adc	r24, r25
 a54:	9a 1f       	adc	r25, r26
 a56:	a1 1d       	adc	r26, r1
 a58:	68 0f       	add	r22, r24
 a5a:	79 1f       	adc	r23, r25
 a5c:	8a 1f       	adc	r24, r26
 a5e:	91 1d       	adc	r25, r1
 a60:	a1 1d       	adc	r26, r1
 a62:	6a 0f       	add	r22, r26
 a64:	71 1d       	adc	r23, r1
 a66:	81 1d       	adc	r24, r1
 a68:	91 1d       	adc	r25, r1
 a6a:	a1 1d       	adc	r26, r1
 a6c:	20 d0       	rcall	.+64     	; 0xaae <__ultoa_invert+0x84>
 a6e:	09 f4       	brne	.+2      	; 0xa72 <__ultoa_invert+0x48>
 a70:	68 94       	set
 a72:	3f 91       	pop	r19
 a74:	2a e0       	ldi	r18, 0x0A	; 10
 a76:	26 9f       	mul	r18, r22
 a78:	11 24       	eor	r1, r1
 a7a:	30 19       	sub	r19, r0
 a7c:	30 5d       	subi	r19, 0xD0	; 208
 a7e:	31 93       	st	Z+, r19
 a80:	de f6       	brtc	.-74     	; 0xa38 <__ultoa_invert+0xe>
 a82:	cf 01       	movw	r24, r30
 a84:	08 95       	ret
 a86:	46 2f       	mov	r20, r22
 a88:	47 70       	andi	r20, 0x07	; 7
 a8a:	40 5d       	subi	r20, 0xD0	; 208
 a8c:	41 93       	st	Z+, r20
 a8e:	b3 e0       	ldi	r27, 0x03	; 3
 a90:	0f d0       	rcall	.+30     	; 0xab0 <__ultoa_invert+0x86>
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__ultoa_invert+0x5c>
 a94:	f6 cf       	rjmp	.-20     	; 0xa82 <__ultoa_invert+0x58>
 a96:	46 2f       	mov	r20, r22
 a98:	4f 70       	andi	r20, 0x0F	; 15
 a9a:	40 5d       	subi	r20, 0xD0	; 208
 a9c:	4a 33       	cpi	r20, 0x3A	; 58
 a9e:	18 f0       	brcs	.+6      	; 0xaa6 <__ultoa_invert+0x7c>
 aa0:	49 5d       	subi	r20, 0xD9	; 217
 aa2:	31 fd       	sbrc	r19, 1
 aa4:	40 52       	subi	r20, 0x20	; 32
 aa6:	41 93       	st	Z+, r20
 aa8:	02 d0       	rcall	.+4      	; 0xaae <__ultoa_invert+0x84>
 aaa:	a9 f7       	brne	.-22     	; 0xa96 <__ultoa_invert+0x6c>
 aac:	ea cf       	rjmp	.-44     	; 0xa82 <__ultoa_invert+0x58>
 aae:	b4 e0       	ldi	r27, 0x04	; 4
 ab0:	a6 95       	lsr	r26
 ab2:	97 95       	ror	r25
 ab4:	87 95       	ror	r24
 ab6:	77 95       	ror	r23
 ab8:	67 95       	ror	r22
 aba:	ba 95       	dec	r27
 abc:	c9 f7       	brne	.-14     	; 0xab0 <__ultoa_invert+0x86>
 abe:	00 97       	sbiw	r24, 0x00	; 0
 ac0:	61 05       	cpc	r22, r1
 ac2:	71 05       	cpc	r23, r1
 ac4:	08 95       	ret
 ac6:	9b 01       	movw	r18, r22
 ac8:	ac 01       	movw	r20, r24
 aca:	0a 2e       	mov	r0, r26
 acc:	06 94       	lsr	r0
 ace:	57 95       	ror	r21
 ad0:	47 95       	ror	r20
 ad2:	37 95       	ror	r19
 ad4:	27 95       	ror	r18
 ad6:	ba 95       	dec	r27
 ad8:	c9 f7       	brne	.-14     	; 0xacc <__ultoa_invert+0xa2>
 ada:	62 0f       	add	r22, r18
 adc:	73 1f       	adc	r23, r19
 ade:	84 1f       	adc	r24, r20
 ae0:	95 1f       	adc	r25, r21
 ae2:	a0 1d       	adc	r26, r0
 ae4:	08 95       	ret

00000ae6 <eeprom_read_word>:
 ae6:	a8 e1       	ldi	r26, 0x18	; 24
 ae8:	b0 e0       	ldi	r27, 0x00	; 0
 aea:	42 e0       	ldi	r20, 0x02	; 2
 aec:	50 e0       	ldi	r21, 0x00	; 0
 aee:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <eeprom_read_blraw>

00000af2 <eeprom_read_block>:
 af2:	dc 01       	movw	r26, r24
 af4:	cb 01       	movw	r24, r22

00000af6 <eeprom_read_blraw>:
 af6:	fc 01       	movw	r30, r24
 af8:	f9 99       	sbic	0x1f, 1	; 31
 afa:	fe cf       	rjmp	.-4      	; 0xaf8 <eeprom_read_blraw+0x2>
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <eeprom_read_blraw+0x14>
 afe:	f2 bd       	out	0x22, r31	; 34
 b00:	e1 bd       	out	0x21, r30	; 33
 b02:	f8 9a       	sbi	0x1f, 0	; 31
 b04:	31 96       	adiw	r30, 0x01	; 1
 b06:	00 b4       	in	r0, 0x20	; 32
 b08:	0d 92       	st	X+, r0
 b0a:	41 50       	subi	r20, 0x01	; 1
 b0c:	50 40       	sbci	r21, 0x00	; 0
 b0e:	b8 f7       	brcc	.-18     	; 0xafe <eeprom_read_blraw+0x8>
 b10:	08 95       	ret

00000b12 <__prologue_saves__>:
 b12:	2f 92       	push	r2
 b14:	3f 92       	push	r3
 b16:	4f 92       	push	r4
 b18:	5f 92       	push	r5
 b1a:	6f 92       	push	r6
 b1c:	7f 92       	push	r7
 b1e:	8f 92       	push	r8
 b20:	9f 92       	push	r9
 b22:	af 92       	push	r10
 b24:	bf 92       	push	r11
 b26:	cf 92       	push	r12
 b28:	df 92       	push	r13
 b2a:	ef 92       	push	r14
 b2c:	ff 92       	push	r15
 b2e:	0f 93       	push	r16
 b30:	1f 93       	push	r17
 b32:	cf 93       	push	r28
 b34:	df 93       	push	r29
 b36:	cd b7       	in	r28, 0x3d	; 61
 b38:	de b7       	in	r29, 0x3e	; 62
 b3a:	ca 1b       	sub	r28, r26
 b3c:	db 0b       	sbc	r29, r27
 b3e:	0f b6       	in	r0, 0x3f	; 63
 b40:	f8 94       	cli
 b42:	de bf       	out	0x3e, r29	; 62
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	cd bf       	out	0x3d, r28	; 61
 b48:	09 94       	ijmp

00000b4a <__epilogue_restores__>:
 b4a:	2a 88       	ldd	r2, Y+18	; 0x12
 b4c:	39 88       	ldd	r3, Y+17	; 0x11
 b4e:	48 88       	ldd	r4, Y+16	; 0x10
 b50:	5f 84       	ldd	r5, Y+15	; 0x0f
 b52:	6e 84       	ldd	r6, Y+14	; 0x0e
 b54:	7d 84       	ldd	r7, Y+13	; 0x0d
 b56:	8c 84       	ldd	r8, Y+12	; 0x0c
 b58:	9b 84       	ldd	r9, Y+11	; 0x0b
 b5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b5c:	b9 84       	ldd	r11, Y+9	; 0x09
 b5e:	c8 84       	ldd	r12, Y+8	; 0x08
 b60:	df 80       	ldd	r13, Y+7	; 0x07
 b62:	ee 80       	ldd	r14, Y+6	; 0x06
 b64:	fd 80       	ldd	r15, Y+5	; 0x05
 b66:	0c 81       	ldd	r16, Y+4	; 0x04
 b68:	1b 81       	ldd	r17, Y+3	; 0x03
 b6a:	aa 81       	ldd	r26, Y+2	; 0x02
 b6c:	b9 81       	ldd	r27, Y+1	; 0x01
 b6e:	ce 0f       	add	r28, r30
 b70:	d1 1d       	adc	r29, r1
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	f8 94       	cli
 b76:	de bf       	out	0x3e, r29	; 62
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	cd bf       	out	0x3d, r28	; 61
 b7c:	ed 01       	movw	r28, r26
 b7e:	08 95       	ret

00000b80 <_exit>:
 b80:	f8 94       	cli

00000b82 <__stop_program>:
 b82:	ff cf       	rjmp	.-2      	; 0xb82 <__stop_program>
